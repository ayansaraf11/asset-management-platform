import R from 'ramda'

export const getPhoneById = (state, id) => R.prop(id, state.phones)
export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps)
export const getActiveTypeId = ownProps => R.path(['params', 'id'], ownProps)


export const getPhones = (state, ownProps) => {
  const activeCategoryId = getActiveCategoryId(ownProps)
  const activeTypeId = getActiveTypeId(ownProps)

  const applySearch = item => R.contains(
    state.phonesPage.search,
    R.prop('name', item)
  )
  const applyCategory = item => R.equals(
    activeCategoryId,
    R.prop('categoryId', item)
  )

  const applyType = item => R.equals(
    activeTypeId,
    R.prop('typeId', item)
  )

  const phones = R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    //R.when(R.always(activeTypeId), R.filter(applyType)),
    R.map(id => getPhoneById(state, id))
  )(state.phonesPage.ids)


    return phones    
  
}

export const getRenderedPhonesLength = state => R.length(state.phonesPage.ids)

export const getCategories = state => R.values(state.categories)

export const getTypes = state => R.values(state.types)



